  ~~~
  # Apps
  ~~~~~
  ~~~
  roady Apps are responsible for implementing the features
  of a website. An App may provide css stylesheets, utilize
  javascript, or configure output to be served in response
  to appropriate requests to any domains the App is built for.
  ~~~~~
  ~~~
  roady App's are just directories that contain the source code
  and resources required to implement the features provided by
  an App.
  ~~~~~
  ~~~
  ### roady App Directory Overview
  ~~~~~
  ~~~
  ```
  Components.php      css         DynamicOutput    js
  OutputComponents    Requests    resources        Responses
  ```
  ~~~~~
  ~~~
  ### Components.php:
  ~~~~~
  ~~~
  This file is used to build an App for a domain.
  ~~~~~
  ~~~
  Note: Building an App for a domain makes the features provided
  by the App available to the domain the App is built for.
  ~~~
  Note: More information about the Components.php file can be
  obtained via:
  ~~~
  `rig --help Components.php`.
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  ### css:
  ~~~~~
  ~~~
  This directory is for an App's css stylesheets.
  ~~~~~
  ~~~
  Note: More information about defining css stylesheets for an
  App can be obtained via:
  ~~~
  `rig --help css`.
  ~~~~~
  ~~~~~
  ~~~
  ### DynamicOutput:
  ~~~~~
  ~~~
  This directory is for files that generate an
  App's output.
  ~~~~~
  ~~~
  Note: More information about DynamicOutput can be
  obtained via:
  ~~~
  `rig --help DynamicOutput`.
  ~~~~~
  ~~~~~
  ~~~
  ### js:
  ~~~~~
  ~~~
  This directory is for an App's javascript files.
  ~~~~~
  ~~~
  Note: More information about utilizing javascript in an App
  can be obtained via:
  ~~~
  `rig --help js`.
  ~~~~~ ~~~~~
  ~~~
  ### OutputComponents:
  ~~~~~
  ~~~
  This directory is for files that configure
  an App's output.
  ~~~~~
  ~~~
  Note: More information about OutputComponents can be
  obtained via:
  ~~~
  `rig --help OutputComponents`.
  ~~~~~
  ~~~~~
  ~~~
  ### Requests:
  ~~~~~
  ~~~
  This directory is for files that configure an
  App's Requests.
  ~~~~~
  ~~~
  Note: More information about Requests can be
  obtained via:
  ~~~
  `rig --help Requests`.
  ~~~~~
  ~~~~~
  ~~~
  ### `resources`:
  ~~~~~
  ~~~
  This directory is for additional miscellaneous
  files and directories utilized by the App.
  ~~~~~
  ~~~
  Note: More information about the resources directory can be
  obtained via:
  ~~~
  `rig --help resources`.
  ~~~~~
  ~~~~~
  ~~~
  ### `Responses`:
  ~~~~~
  ~~~
  This directory is for files that configure an
  App's Responses.
  ~~~~~
  ~~~
  Note: More information about Responses can be
  obtained via:
  ~~~
  `rig --help Responses`.
  ~~~~~
  ~~~~~
  ~~~
  # Creating roady Apps
  ~~~~~
  ~~~
  Apps can be created via `rig --new-app`, or
  `rig --configure-app-output`.
  ~~~~~
  ~~~
  Once created, an App can be built for a domain by executing
  the App's Components.php via `php`. For example:
  ~~~
  ```
  php ~/roady/Apps/HelloWorld/Components.php \
      'http://localhost:8080'
  ```
  ~~~~~
  ~~~~~
  ~~~
  Note: More information about Apps can be obtained via:
  ~~~
  `rig --help Apps`
  ~~~~~
  More information about `rig --new-app` can be obtained via:
  ~~~
  `rig --help --new-app`
  ~~~~~
  More information about `rig --configure-app-output` can be
  obtained via:
  ~~~
  `rig --help --configure-app-output`
  ~~~~~
  More information about the Components.php file can be obtained
  via:
  ~~~
  `rig --help Components.php`
  ~~~~~
  ~~~~~
  ~~~
  ### Hello World
  ~~~~~
  ~~~
  The following example demonstrates how to use rig to begin
  developing a roady App named HelloWorld.
  ~~~~~
  ~~~
  Note: In the following examples roady is assumed to be
  installed in the user's `home` directory. Make sure to
  adjust the paths used in the following examples if you
  installed roady at a different path.
  ~~~~~
  ~~~
  1. Use `rig --configure-app-output` to create an App named
  HelloWorld, and configure the output `<p>Hello World</p>`
  to be served in response to requests to the root of any
  domain the HelloWorld App is built for:
  ~~~
  ```
  rig --configure-app-output \
      --for-app HelloWorld \
      --name HelloWorld \
      --output '<p>Hello World</p>' \
      --relative-urls '/'
  ```
  ~~~~~
  ~~~
  Note: More information about `rig --configure-app-output` can
  be obtained via:
  ~~~
  `rig --help --configure-app-output`
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  2. Build the HelloWorld App for the local domain
  `http://localhost:8080`:
  ~~~
  ```
  php ~/roady/Apps/HelloWorld/Components.php \
      'http://localhost:8080'
  ```
  ~~~~~
  ~~~
  Note: More information about the Components.php file can be
  obtained via:
  ~~~
  `rig --help Components.php`
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  3. Use `rig --start-server` to start a local development
  server on port `8080`:
  ~~~
  ```
  rig --start-server \
      --port 8080 \
      --open-in-browser
  ```
  ~~~~~
  ~~~
  Note: More information about the `rig --start-server` can be
  obtained via:
  ~~~
  `rig --help --start-server`
  ~~~~~
  ~~~~~
  ~~~
  Note: The `--open-in-browser` flag should cause rig to open
  http://localhost:8080 in a web browser. This flag relies on the
  `xdg-open` command, and may not always work. If it fails, you
  can still manually open http://localhost:8080 in a web browser.
  ~~~~~
  ~~~
  Note: `xdg-open` is a command that will open a url in the
  user's default browser, if `xdg-open` is not available on
  your system then the `--open-in-broswer` flag will not work.
  The `xdg-open` command is not associated with roady or rig,
  more information about the `xdg-open` command can be found
  online at:
  ~~~
  https://linux.die.net/man/1/xdg-open
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  4. Use a text editor or IDE to edit HelloWorld's output:
  ~~~
  ```
  vim ~/roady/Apps/HelloWorld/DynamicOutput/HelloWorld.php
  ```
  ~~~~~
  ~~~
  And revise `HelloWorld.php`'s content to be:
  ~~~~~
  ~~~
  ```
  <div class="hw-container">
      <h1>Roady</h1>
      <p>
          roady is a tool designed to aid in the development of
          websites.
      </p>
      <p>
          With roady, the features of a website are implemented
          by small niche applications called Apps.
      </p>
      <p>
          roady Apps may provide css stylesheets, utilize
          javascript, and may configure output to be served in
          response to appropriate requests to a website's
          domain.
      </p>
      <p>
          Multiple websites can run on a single installation of
          roady, each making use of one or more roady Apps.
      </p>
      <p>
          For a guide on getting started with roady visit:
      </p>
      <p>
          <a href="https://roady.tech/index.php?request=getting-started">
              https://roady.tech/index.php?request=getting-started
          </a>
      </p>
  </div>
  ```
  ~~~~~
  ~~~~~
  ~~~
  5. Create a stylesheet named `hw-global-styles.css` for the
  HelloWorld App using a text editor or IDE:
  ~~~
  ```
  vim ~/roady/Apps/HelloWorld/css/hw-global-styles.css
  ```
  ~~~~~
  ~~~
  Define the following styles in
  `~/roady/Apps/HelloWorld/css/hw-global-styles.css`:
  ~~~~~
  ~~~
  ```
  body {
      background: #140a09;
      background-image:
          linear-gradient(45deg, #00bbff 25%, transparent 25%),
          linear-gradient(-45deg, #020203 25%, transparent 25%),
          linear-gradient(45deg, transparent 75%, #00bbff 75%),
          linear-gradient(-45deg, transparent 75%, #020203 75%);
      background-size: 10rem 10rem;
      background-position:
          0 0,
          0 10rem,
          10rem -10rem,
          -10rem 0rem;
      color: #00ffc3;
      font-size: 1.2rem;
      font-family: monospace;
      padding: 0;
      margin: 0;
  }

  .hw-container {
      width: 80%;
      background: #010103;
      opacity: .92;
      margin: 3rem auto;
      padding: 3rem;
      border: .2rem double white;
  }

  .hw-container h1 {
      color: white;
      text-shadow: -1px 1px #00ffc3;
  }

  .hw-container a,
  .hw-container a:link,
  .hw-container a:visited {
      text-decoration: none;
      color: white;
  }

  .hw-container a:hover,
  .hw-container a:active {
      color: #00bbff;
  }
  ```
  ~~~~~
  ~~~
  Note: Apps can define stylesheets that are served in
  response to all requests to the domains an App is built
  for by including the string `global` in the stylesheets
  name. If the stylesheet's name does not contain the string
  `global` then the stylesheet will only be served in response
  to requests where the value of `$_GET['request']` matches the
  name of the stylesheet.
  ~~~
  Note: More information about using css stylesheets in roady
  Apps can be obtained via:
  ~~~
  `rig --help css`
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  The HelloWorld App should now exist in roady's Apps directory,
  and it's output should be accessible from a web browser at the
  following local urls:
  ~~~
  http://localhost:8080/
  ~~~~~
  ~~~
  http://localhost:8080/index.php?request=HelloWorld
  ~~~~~
  ~~~
  http://localhost:8080?request=HelloWorld
  ~~~~~
  ~~~~~
  ~~~
  ### HelloWorld App command summary:
  ~~~~~
  ~~~
  The following is a summary of the commands used in the examples
  above to create a HelloWorld App, build it for a domain, start
  a development server, and modify HelloWorld's source code:
  ~~~~~
  ~~~
  ```
  rig --configure-app-output \
      --for-app HelloWorld \
      --name HelloWorld \
      --output '<p>Hello World</p>' \
      --relative-urls '/'

  php ~/roady/Apps/HelloWorld/Components.php \
      'http://localhost:8080'

  rig --start-server \
      --port 8080 \
      --open-in-browser

  vim ~/roady/Apps/HelloWorld/DynamicOutput/HelloWorld.php

  vim ~/roady/Apps/HelloWorld/css/hw-global-styles.css
  ```
  ~~~~~
