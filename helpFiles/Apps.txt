  ~~~
  # Apps:
  ~~~~~
  ~~~
  Apps are used to implement niche features that can be made
  available to one or more websites running on a single
  installation of roady.
  ~~~~~
  ~~~
  Apps can provide stylesheets, scripts, and can configure
  output to be served in Response to appropriate Requests to
  any domains the Apps are built for.
  ~~~~~
  ~~~
  For example, the online documentation on https://roady.tech
  is generated by an App named RoadyAndRigDocs that reads the help
  files provided by rig and outputs them as html.
  ~~~~~
  ~~~
  Note: The RoadyAndRigDocs App is part of the roadyAppPackages
  library which is installed in roady's vendor directory when
  `composer update` is run, and is available on github:
  ~~~~~
  ~~~
  https://github.com/sevidmusic/roadyAppPackages
  ~~~~~
  ~~~
  Note: Any of the App Packages included in the roadyAppPackages
  library can be made into roady Apps via `rig --make-app-package`.
  ~~~~~
  ~~~
  For example, if roady is installed at `~/roady`, then to make
  the RoadyAndRigDocs App Package from the roadyAppPackages library
  into a App, and build it to run on the local domain
  http://localhost:8080:
  ~~~~~
  ~~~
  ```
  rig --make-app-package \
  --path ~/roady/vendor/darling/roady-app-packages/RoadyAndRigDocs

  php ~/roady/Apps/RoadyAndRigDocs/Components.php 'http://localhost:8080'

  rig --start-server --port 8080
  ```
  ~~~~~
  ~~~
  For more information about `rig --make-app-package` use:
  ~~~~~
  ~~~
  ```rig --help --make-app-package```
  ~~~~~
  ~~~
  An Apps purpose should be focused, for example, the only
  responsibilities of the RoadyAndRigDocs App is to format
  the help files provided by rig as html, and serve the
  appropriate help file in Response to appropriate Requests
  to any domains the RoadyAndRigDocs App is built for.
  ~~~~~

  ~~~
  For a Hello World example, follow the getting-started
  documentation available via:
  ~~~~~
  ~~~
  ```rig --help getting-started```
  ~~~~~

  ~~~
  #  roady's Apps directory:
  ~~~~~
  ~~~
  Apps must be placed in roady's Apps directory for them to be
  available for use. roady's Apps directory will be located in
  roady's root directory.
  ~~~~~
  ~~~
  For example, if roady is installed at the path `~/roady`, then
  the Apps directory will be located at the following path:
  ~~~~~
  ~~~
  `~/roady/Apps`
  ~~~~~

  ~~~
  # App Structure:
  ~~~~~
  ~~~
  An App has the following structure:
  ~~~~~
  ~~~
  ```
  Components.php
  css
  js
  DynamicOutput
  OutputComponents
  Requests
  Responses
  resources
  ```
  ~~~~~

  ~~~
  Overview:
  ~~~~~

  ~~~
  ### Components.php
  ~~~~~
  ~~~
  The `Components.php` file is used to build an App for a specific
  domain.
  ~~~~~
  ~~~
  For example, if roady is installed at `~/roady`, then to create an App
  named `Foo` and build it for the domain https://localhost:8080 run:
  ~~~~~
  ~~~
  ```
  rig --new-app --name Foo

  php ~/roady/Apps/Foo/Components.php 'https://localhost:8080'
  ```
  ~~~~~
  ~~~
  Note: Foo's Components.php will be generated when `rig --new-app`
  is run.
  ~~~~~
  ~~~
  Warning: If an App does not configure any output, then you will
  not see any output from the App even if you successfully build
  it for one or more domains.
  ~~~~~
  ~~~
  The easiest way to configure output for an App is to use
  `rig --configure-app-output`.
  ~~~~~
  ~~~
  For more information about `rig --configure-app-output` use:
  ~~~~~
  ~~~
  ```rig --help --configure-app-output```
  ~~~~~

  ~~~
  ### css
  ~~~~~
  ~~~
  The `css` directory is where an Apps stylesheets should be placed.
  ~~~~~
  ~~~
  Apps can define stylesheets that are loaded in response to
  specific Requests to the domains an App is built for, or can
  define stylesheets that are loaded in response to all Requests to
  the domains an App is built for.
  ~~~~~
  ~~~
  If the name of a stylesheet defined by an App contains the word
  `global`, it will be loaded in response to all Requests to the
  domains that the App is built for.
  ~~~~~
  ~~~
  If the stylesheet's name does not contain the word `global`, then the
  stylesheet will only be loaded in response to Requests whose name
  matches the name of the stylesheet, excluding the `.css` extension.
  ~~~~~
  ~~~
  For instance, if a stylesheet named `global-styles.css`
  is defined by an App named HelloWorld, and the HelloWorld App is
  built for the domain http://localhost:8080, then `global-styles.css`
  will be loaded in response to all Requests to the domain
  http://localhost:8080.
  ~~~~~
  ~~~
  If the HelloWorld App also defined a stylesheet named `homepage.css`,
  then `homepage.css` would only be loaded in response to Requests
  that have the name `homepage`:
  ~~~~~
  ~~~
  For Example:
  ~~~~~

      ~~~
      http://localhost:8080?request=homepage
      ~~~~~

      ~~~
      http://localhost:8080/index.php?request=homepage
      ~~~~~

  ~~~
  Note: The name of the Request will correspond to the value of
  `$_GET['request']`.
  ~~~~~

  ~~~
  ### js
  ~~~~~
  ~~~
  The `js` directory is where an Apps scripts should be placed.
  ~~~~~
  ~~~
  Note: There are plans to implement similar functionality
  for loading App javascript files as is currently used to
  load App css files. See issue #234:
  ~~~~~
  ~~~
  https://github.com/sevidmusic/Roady/issues/234
  ~~~~~

  ~~~
  ### DynamicOutput
  ~~~~~
  ~~~
  The `DynamicOutput` directory is where an Apps Dynamic Output
  files should be placed. These files are used to generate output
  for DynamicOutputComponents.
  ~~~~~
  ~~~
  Dynamic output files can be `.php` files, `.html` files, plain text
  files, or any other type of file.
  ~~~~~
  ~~~
  Note: `.php` files will be interpreted as php, all other file
  types will be interpreted as plain text.
  ~~~~~
  ~~~
  Note: Typically, you do not need to create these files manually,
  if you use `rig --new-dynamic-output-component` or
  `rig --configure-app-output` then an appropriate DynamicOutput
  file will be generated for you.
  ~~~~~
  ~~~
  For more information about `rig --new-dynamic-output-component` use:
  ~~~~~
  ~~~
  ```rig --help --new-dynamic-output-component```
  ~~~~~
  ~~~
  For more information about `rig --configure-app-output` use:
  ~~~~~
  ~~~
  ```rig --help --configure-app-output```
  ~~~~~

  ~~~
  ### OutputComponents
  ~~~~~
  ~~~
  The `OutputComponents` directory is where an Apps OutputComponent
  and DynamicOutputComponent configuration files should be placed.
  ~~~~~
  ~~~
  Typically, you do not need to create these files manually. You
  can use either the `rig --new-dynamic-output-component`,
  `rig --new-output-component`, or `rig --configure-app-output`,
  command to configure a new DynamicOutputComponent or
  OutputComponent for an App.
  ~~~~~
  ~~~
  For more information about `rig --new-dynamic-output-component` use:
  ~~~~~
  ~~~
  ```rig --help --new-dynamic-output-component```
  ~~~~~
  ~~~
  For more information about `rig --new-output-component` use:
  ~~~~~
  ~~~
  ```rig --help --new-output-component```
  ~~~~~
  ~~~
  For more information about `rig --configure-app-output` use:
  ~~~~~
  ~~~
  ```rig --help --configure-app-output```
  ~~~~~

  ~~~
  ### Requests
  ~~~~~
  ~~~
  The `Requests` directory is where an Apps Request configuration
  files should be placed.
  ~~~~~
  ~~~
  Typically, you do not need to create these files manually. You
  can use the `rig --new-request` command to configure a new Request
  for an App.
  ~~~~~
  ~~~
  Note: When the `rig --configure-app-output` command is used, one
  or more appropriate Requests will be configured for the output.
  ~~~~~
  ~~~
  For more information about `rig --new-request` use:
  ~~~~~
  ~~~
  ```rig --help --new-request```
  ~~~~~
  ~~~
  For more information about `rig --configure-app-output` use:
  ~~~~~
  ~~~
  ```rig --help --configure-app-output```
  ~~~~~

  ~~~
  ### Responses
  ~~~~~
  ~~~
  The `Responses` directory is where an Apps Response and
  GlobalResponse configuration files should be placed.
  ~~~~~
  ~~~
  Typically, you do not need to create these files manually. You
  can use the `rig --new-response`, or `rig --new-global-response`
  command to configure a new Response for an App.
  ~~~~~
  ~~~
  Note: When the `rig --configure-app-output` command is used,
  an appropriate Response or GlobalResponse will be configured
  for the output.
  ~~~~~
  ~~~
  For more information about `rig --new-response` use:
  ~~~~~
  ~~~
  ```rig --help --new-response```
  ~~~~~
  ~~~
  For more information about `rig --new-global-response` use:
  ~~~~~
  ~~~
  ```rig --help --new-global-response```
  ~~~~~
  ~~~
  For more information about `rig --configure-app-output` use:
  ~~~~~
  ~~~
  ```rig --help --configure-app-output```
  ~~~~~

  ~~~
  ### resources
  ~~~~~
  ~~~
  The `resources` directory is where any additional resources
  provided by, or required by the App should be placed.
  ~~~~~
  ~~~
  # Creating Apps:
  ~~~~~
  ~~~
  New App's can be created with either `rig --new-app` or
  `rig --configure-app-output`,
  ~~~~~
  ~~~
  For more information about `rig --new-app` use:
  ~~~~~
  ~~~
  ```rig --help --new-app```
  ~~~~~
  ~~~
  For more information about `rig --configure-app-output` use:
  ~~~~~
  ~~~
  ```rig --help --configure-app-output```
  ~~~~~
  ~~~
  # Building Apps for a Domain:
  ~~~~~
  ~~~
  Apps can be built for a domain by passing the desired
  domain to the relevant App's Components.php file.
  ~~~~~
  ~~~
  For example, if an App existed at:
  ~~~~~
  ~~~
  `~/roady/Apps/Foo`
  ~~~~~
  ~~~
  It could be built for the domain http://localhost:8080 via:
  ~~~~~
  ~~~
  ```php ~/roady/Apps/Foo/Components.php 'http://localhost:8080'```
  ~~~~~
  ~~~
  Note: It is best to wrap the domain in single quotes.
  ~~~~~
  ~~~
  Warning: Do not include a trailing foward-slash in the domain.
  This is bug, it will be resolved. See issue #193:
  ~~~~~
  ~~~
  https://github.com/sevidmusic/Roady/issues/193
  ~~~~~
  ~~~
  Until issue #193 is resolved, the following examples show the
  incorrect, and correct ways to build an App:
  ~~~~~
  ~~~
  Incorrect:
  ~~~~~
  ~~~
  ```
  php ~/roady/Apps/Foo/Components.php 'https://localhost:8080/'
  ```
  ~~~~~
  ~~~
  Correct:
  ~~~~~
  ~~~
  ```
  php ~/roady/Apps/Foo/Components.php 'https://localhost:8080'
  ```
  ~~~~~
  ~~~
  It is possible to build the same App for multiple domains, making
  it available to multiple websites running on a single installation
  of roady.
  ~~~~~
  ~~~
  For example, if roady is installed at the path `~/roady`, then
  to build an existing App named Foo for the domains
  https://localhost:8080, https://localhost:8947, and
  https://localhost:8017 you would execute:
  ~~~~~
  ~~~
  ```
  php ~/roady/Apps/Foo/Components.php 'https://localhost:8080'
  php ~/roady/Apps/Foo/Components.php 'https://localhost:8947'
  php ~/roady/Apps/Foo/Components.php 'https://localhost:8017'
  ```
  ~~~~~
  ~~~
  Once built, the Apps will be available on the domains they
  were built for.
  ~~~~~
  ~~~
  Note: If you are developing locally, you can use `rig --start-server`
  to start a development server to run your Apps.
  ~~~~~
  ~~~
  Note: To build Apps for production domains the process is the same,
  but your domain and your server must be setup properly. Hosting, and
  server setup are beyond the scope of this documentation.
  ~~~~~

  ~~~
  For a good example on getting started developing roady Apps use:
  ~~~~~
  ~~~
  ```rig --help getting-started```
  ~~~~~

