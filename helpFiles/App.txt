  # Apps
  ~~~
  Apps are used to implement niche features that can be made
  available to one or more websites running on a single
  installation of roady.
  ~~~~~
  ~~~
  New App's can be created with either `rig --new-app` or
  `rig --configure-app-output`.
  ~~~~~
  ~~~
  The structure of an App is as follows:
  ~~~~~
  ```
  Components.php
  css
  js
  DynamicOutput
  OutputComponents
  Requests
  Responses
  resources
  ```

  # Overview

  ### Components.php
  ~~~
  The `Components.php` file is used to build the App for a specific
  domain.
  ~~~~~
  ~~~
  For example, to create an App named `Foo` and build it for the
  domain https://foobar.baz:
  ~~~~~
  ```
  rig --new-app --name Foo

  php /path/to/roady/Apps/Foo/Components.php 'https://foobar.baz'
  ```
  ~~~
  Foo's Components.php will be generated when `rig --new-app` is run,
  and will look like:
  ~~~~~
  ~~~
  ```
<?php

/**
 * Components.php
 *
 * This file is used to configure an AppBuilder for the App.
 *
 * The AppBuilder is responsible for building the App for a domian when the this
 * file is executed via php.
 *
 *     For example:
 *
 *     php Apps/APPNAME/Components.php
 *
 * Unless you modify this file's logic, the domain the App is built for will be
 * determined as follows:
 *
 *     1. If a domain is specified via $argv[1] the App will be built
 *        for that domain.
 *
 *        For example:
 *
 *            php Apps/APPNAME/Components.php 'https://specified.domain'
 *
 *        Would build the App for the domain:
 *
 *            https://specified.domain
 *
 *     2. If a domain is not specified via $argv[1] then the App will be built
 *        for the hard coded domain passed as the $domain parameter to this
 *        files call to the AppBuilder::getAppsAppComponentsFactory() method:
 *
 *            AppBuilder::buildApp(
 *                AppBuilder::getAppsAppComponentsFactory($appName, $domain)
 *                                                                     ^
 *            );
 *
 *     3. If a domain is not specified via $argv[1], and the hard-coded default
 *        domain is either not defined, or defined as an empty string, then the
 *        App will be built for the domain:
 *
 *            http://localhost:8080
 */

use roady\classes\utility\AppBuilder;

ini_set('display_errors', 'true');

require(
    strval(
        realpath(
            str_replace(
                'Apps' . DIRECTORY_SEPARATOR . strval(basename(__DIR__)),
                'vendor' . DIRECTORY_SEPARATOR . 'autoload.php',
                __DIR__
            )
        )
    )
);

AppBuilder::buildApp(
    AppBuilder::getAppsAppComponentsFactory(
        /**
         * @param string $appName
         * Configure the App's name. The App's name should match the App's
         * directory's name.
         */
        strval(basename(__DIR__)),
        (
            /**
             * @param string $domain
             * Configure the domain to build the App for.
             * App will be built for Domain specified via $argv[1] if provided.
             *
             * If $argv[1] is not provided, and the
             * AppBuilder::getAppsAppComponentsFactory() method's $domain
             * parameter is set, the App will be built for the domain passed
             * to the $domain parameter.
             *
             * Note: If $argv[1] is not specified, and the $domain parameter
             * is an empty string, then the AppBuilder will build the App for the
             * domain:
             *
             *     http://localhost:8080
             *
             * WARNING: If you modify this file, it is recomeneded that you
             *          still pass the value you use for the $domain parameter to
             *          escapeshellarg().
             */
            escapeshellarg($argv[1] ?? 'http://localhost:8080/')
        )
    )
);
  ```
  ~~~~~

  ### css
  ~~~
  The `css` directory is where an Apps stylsheets should be placed.
  ~~~~~
  ~~~
  Apps can define stylesheets that are loaded in response to
  specific Requests to the domains an App is built for, or can
  define stylesheets that are loaded in response to all Requests to
  the domains an App is built for.
  ~~~~~
  ~~~
  If the name of a stylesheet defined by an App contains the word
  `global`, it will be loaded in response to all Requests to the
  domains that the App is built for.
  ~~~~~
  ~~~
  If the stylesheet's name does not contain the word `global`, then the
  stylesheet will only be loaded in response to Requests whose name
  matches the name of the stylesheet, excluding the `.css` extension.
  ~~~~~
  ~~~
  For instance, if a stylesheet named `global-styles.css`
  is defined by an App named HelloWorld, and the HelloWorld App is
  built for the domain http://localhost:8080, then `global-styles.css`
  will be loaded in response to all Requests to the domain
  http://localhost:8080.
  ~~~~~
  ~~~
  If the HelloWorld App also defined a stylesheet named `homepage.css`,
  then `homepage.css` would only be loaded in response to Requests
  that have the name `homepage`:
  ~~~~~
  ~~~
  For Example:
  ~~~~~

      ~~~
      http://localhost:8080?request=homepage
      ~~~~~

      ~~~
      http://localhost:8080/index.php?request=homepage
      ~~~~~

  ~~~
  Note: The name of the Request will correspond to the value of
  `$_GET['request']`.
  ~~~~~

  ### js
  ~~~
  The `js` directory is where an Apps scripts should be placed.
  ~~~~~
  ~~~
  Note: There are plans to implment similar functionality
  for loading App javascript files as is currently used to
  load App css files. See issue #234:
  ~~~~~
  ~~~
  https://github.com/sevidmusic/Roady/issues/234
  ~~~~~

  ### DynamicOutput
  ~~~
  The `DynamicOutput` directory is where an Apps Dynamic Output
  files should be placed. These files are used to generate output
  for DynamicOutputComponents.
  ~~~~~

  ### OutputComponents
  ~~~
  The `OutputComponents` directory is where an Apps OutputComponent
  and DynamicOutputComponent configuration files should be placed.
  ~~~~~

  ### Requests
  ~~~
  The `Requests` directory is where an Apps Request configuration
  files should be placed.
  ~~~~~

  ### Responses
  ~~~
  The `Responses` directory is where an Apps Response and
  GlobalResponse configuration files should be placed.
  ~~~~~

  ### resources
  ~~~
  The `resources` directory is where any additional resources
  provided by, or required by the App should be placed.
  ~~~~~

