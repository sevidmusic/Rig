  ~~~
  # Getting Started
  ~~~~~
  ~~~
  The following goes over how to install and setup roady, and
  how to build a HelloWorld App.
  ~~~~~
  ~~~
  https://roadydemos.us-east-1.linodeobjects.com/getting-started-2021-08-31_02.11.21.webm
  ~~~~~
  ~~~
  Note: In the following examples roady is installed in the user's `home`
  directory. Make sure to adjust the paths used in the following examples
  if you install roady at a different path.
  ~~~~~
  ~~~
  # Installation & Setup
  ~~~~~
  ~~~
  1. Move into the directory where you want to install roady:
  ~~~~~
        ~~~```cd ~/```~~~~~
  ~~~
  Note: `~/` is shorthand for the path to the current user's `home`
  directory.
  ~~~~~
  ~~~
  2. Clone roady from https://github.com/sevidmusic/roady.git:
  ~~~~~
        ~~~```git clone https://github.com/sevidmusic/roady.git```~~~~~
  ~~~
  3. Move into roady's root directory:
  ~~~~~
        ~~~```cd ~/roady```~~~~~
  ~~~
  4. Update `composer`:
  ~~~~~
        ~~~```composer update```~~~~~
  ~~~
  Note: composer is a dependency manager for PHP, for more information
  about composer visit:
  ~~~
  https://getcomposer.org/
  ~~~~~
  ~~~~~
  ~~~
  Note: Running `composer update` will install rig at the following path:
  ~~~
  `~/roady/vendor/darling/rig`
  ~~~~~
  rig is a command line utility designed to aid in the development
  of roady Apps.
  ~~~~~
  ~~~
  Note: Running `composer update` will also install the roadyAppPackages
  library at the following path:
  ~~~
  `~/roady/vendor/darling/roady-app-packages`
  ~~~~~
  The roadyAppPackages library is a collection of roady App Packages
  that can be made into roady Apps via:
  ~~~
  `rig --make-app-package`.
  ~~~~~
  Once roady is installed and setup, more information about
  `rig --make-app-package` can be obtained via:
  ~~~
  `rig --help --make-app-package`
  ~~~~~
  Once roady is installed and setup, more information about
  App Packages can be obtained via:
  ~~~
  `rig --help AppPackage`
  ~~~~~
  ~~~~~
  ~~~
  5. Add rig to your path:
  ~~~~~
        ~~~```export PATH="${PATH}:${HOME}/roady/vendor/darling/rig/bin"```~~~~~
  ~~~
  Note: This will only add rig to your `$PATH` temporarily, to add it
  permanently you will need to set your `$PATH` in the appropriate
  configuration file for the shell you are using. For information
  on setting your `$PATH` permanently, please consult the documentation
  for the shell you are using.
  ~~~~~
  ~~~
  6. Make sure rig is working:
  ~~~~~
        ~~~```rig --help | less -R```~~~~~

  ~~~
  Note: The documentation can always be obtained locally via:

  `rig --help`
  ~~~~~
  ~~~
  Note: `less` is not associated with roady or rig. The `less` command is used
  in the example to make it easier to view the output of `rig --help`. More
  information about the `less` command can be found online at:

  https://man7.org/linux/man-pages/man1/less.1.html
  ~~~~~
  ~~~
  # Installation And Setup Finished
  ~~~~~
  ~~~
  roady should now be installed at the path `~/roady`, and rig
  should now be in your `$PATH`.
  ~~~~~
  ~~~
  The next step is to start building roady Apps.
  ~~~~~
  ~~~
  # A brief introduction to roady Apps
  ~~~~~
  ~~~
  roady Apps are responsible for implementing the features of a
  website. An App may provide stylesheets, scripts, or configure
  output to be served in response to appropriate requests to
  any domains the App is built for.
  ~~~~~
  ~~~
  An App has the following structure:
  ~~~~~
  ~~~
  ```
  Components.php
  css
  js
  DynamicOutput
  OutputComponents
  Requests
  Responses
  resources
  ```
  ~~~~~
  ~~~
  Apps can be created via `rig --new-app`, or `rig --configure-app-output`.
  ~~~~~
  ~~~
  Once created, they can be built for one or more domains.
  ~~~~~
  ~~~
  Note: More information about `rig --new-app` can be obtained via:
  ~~~
  `rig --help --new-app`
  ~~~~~
  More information about `rig --configure-app-output` can be obtained via:
  ~~~
  `rig --help --configure-app-output`
  ~~~~~
  More information about Apps can be obtained via:
  ~~~
  `rig --help Apps`
  ~~~~~
  ~~~~~
  ~~~
  # Hello World
  ~~~~~
  ~~~
  The following example demonstrates how to use rig to begin
  developing an App named HelloWorld.
  ~~~~~
  ~~~
  Note: In the following examples roady is assumed to be installed
  in the user's `home` directory. Make sure to adjust the paths
  used in the following examples if you installed roady at a
  different path.
  ~~~~~
  ~~~
  1. Use `rig --configure-app-output` to create an App named HelloWorld
  ~~~~~
  ~~~
  ```
        rig --configure-app-output \
        --for-app HelloWorld \
        --name HelloWorld \
        --output '<p>Hello World</p>' \
        --relative-urls '/'
  ```
  ~~~~~
  ~~~
  2. Build the HelloWorld App for the domain `http://localhost:8080`:
  ~~~~~
  ~~~
  ```
        php ~/roady/Apps/HelloWorld/Components.php \
        'http://localhost:8080'
  ```
  ~~~~~
  ~~~
  3. Use rig to start a development server:
  ~~~~~
  ~~~
  ```
        rig --start-server \
        --port 8080 \
        --open-in-browser
  ```
  ~~~~~
  ~~~
  Note: The `--open-in-browser` flag should cause rig to open
  http://localhost:8080 in a web browser. This flag relies on the
  `xdg-open` command, and may not always work. If it fails, you can
  still manually open http://localhost:8080 in a web browser.
  ~~~~~
  ~~~
  Note: `xdg-open` is a command that will open a url in the user's default
  browser, if it is not available on your system then the
  `--open-in-broswer` flag will not work. The `xdg-open` command is not
  associated with roady or rig, more information about the `xdg-open`
  command can be found at:

  https://linux.die.net/man/1/xdg-open
  ~~~~~
  ~~~
  4. Use a text editor or IDE to edit HelloWorld's DynamicOutput file:
  ~~~~~
  ~~~```vim ~/roady/Apps/HelloWorld/DynamicOutput/HelloWorld.php```~~~~~
  ~~~
  And revise `~/roady/Apps/HelloWorld/DynamicOutput/HelloWorld.php`'s
  content to be:
  ~~~~~
  ~~~
  ```
  <div class="container">

      <h1>Roady</h1>

      <p>
          <a href="https://github.com/sevidmusic/roady">Roady</a> is a tool
          designed to aid in the development of websites.
      </p>

      <p>
          Its design allows the features of a website to be implemented as
          smaller niche applications called Apps.
      </p>

      <p>
          The features of an App can be made available to multiple websites
          running on a single installation of
          <a href="https://github.com/sevidmusic/roady">Roady</a>.
      </p>

      <p>
          Apps can configure output to show up in response to appropriate
          Requests to a
          website, and can also provide stylesheets, scripts, and other
          resources necessary to implement the specific features they provide.
      </p>

  </div>
  ```
  ~~~~~
  ~~~
  5. Create a stylesheet named `hw-global-styles.css` for the
  HelloWorld App using a text editor or IDE:
  ~~~~~
  ~~~```vim ~/roady/Apps/HelloWorld/css/hw-global-styles.css```~~~~~
  ~~~
  Define the following styles in
  `~/roady/Apps/HelloWorld/css/hw-global-styles.css`:
  ~~~~~
  ~~~
  ```
  body {
      background: #140a09;
      background-image: linear-gradient(45deg, #00bbff 25%, transparent 25%),
                        linear-gradient(-45deg, #020203 25%, transparent 25%),
                        linear-gradient(45deg, transparent 75%, #00bbff 75%),
                        linear-gradient(-45deg, transparent 75%, #020203 75%);
      background-size: 10rem 10rem;
      background-position: 0 0, 0 10rem, 10rem -10rem, -10rem 0rem;
      color: #fa5f11;
      font-size: 1.2rem;
      font-family: monospace;
      padding: 0;
      margin: 0;
  }

  .container h1 {
      color: white;
  }

  .container {
      width: 80%;
      background: #010103;
      opacity: .72;
      margin: 3rem auto;
      padding: 3rem;
      border: .2rem double white;
  }

  .container a, .container a:link, .container a:visited {
      text-decoration: none;
      color: white;
  }

  .container a:hover, .container a:active {
      color: #00bbff;
  }
  ```
  ~~~~~
  ~~~
  Note:
  ~~~
  Apps can define stylesheets that are served in response to
  specific Requests to the domains an App is built for, or can define
  stylesheets that are served in response to all Requests to the
  domains an App is built for.
  ~~~~~
  ~~~
  If the name of a stylesheet defined by an App contains the word
  `global`, it will be served in response to all Requests to the
  domains that the App is built for.
  ~~~~~
  ~~~
  For instance, in the Hello World example a stylesheet named
  `hw-global-styles.css` is defined by the HelloWorld App, and
  the HelloWorld App is built for the domain http://localhost:8080,
  so the `hw-global-styles.css` stylesheet will be served in response
  to all Requests to the domain http://localhost:8080.
  ~~~~~
  ~~~
  If the stylesheet's name does not contain the word `global`, then the
  stylesheet will only be served in response to Requests whose name
  matches the name of the stylesheet, excluding the `.css` extension.
  ~~~~~
  ~~~
  Note: The name of the Request will correspond to the value of
  `$_GET['request']`.
  ~~~~~
  ~~~
  For instance, if the HelloWorld App also defined a stylesheet
  named `homepage.css`, then the `homepage.css` stylesheet would
  only be served in response to Requests that have the name
  `homepage`. For example:
  ~~~~~
  ~~~
  http://localhost:8080?request=homepage
  ~~~~~
  ~~~
  http://localhost:8080/index.php?request=homepage
  ~~~~~
  ~~~
  http://localhost:8080/index.php?foo=bar&request=homepage
  ~~~~~
  More information about using css stylesheets in roady Apps
  can be obtained via:
  ~~~
  `rig --help css`
  ~~~~~
  More information about roady Apps can be obtained via:
  ~~~
  `rig --help Apps`
  ~~~~~
  ~~~~~
  ~~~
  # App Packages
  ~~~~~

