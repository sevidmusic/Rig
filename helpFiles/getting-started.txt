  ~~~
  # Getting Started
  ~~~~~
  ~~~
  The following examples demonstrate how to install and setup roady, and
  how to build a HelloWorld App.
  ~~~~~
  ~~~
  https://roadydemos.us-east-1.linodeobjects.com/getting-started-2021-08-31_02.11.21.webm
  ~~~~~
  ~~~
  Note: In the following examples roady is installed in the user's `home`
  directory. Make sure to adjust the paths used in the following examples
  if you install roady at a different path.
  ~~~~~
  ~~~
  # Installation & Setup
  ~~~~~
  ~~~
  1. Move into the directory where you want to install roady:
  ~~~
  ```cd ~/```
  ~~~~~
  ~~~
  Note: `~/` is shorthand for the path to the current user's `home`
  directory.
  ~~~~~
  ~~~~~
  ~~~
  2. Clone roady from https://github.com/sevidmusic/roady.git:
  ~~~
  ```git clone https://github.com/sevidmusic/roady.git```
  ~~~~~
  ~~~
  Note: git is a version control system, for more information
  about git visit:
  ~~~
  https://git-scm.com
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  3. Move into roady's root directory:
  ~~~
  ```cd ~/roady```
  ~~~~~
  ~~~~~
  ~~~
  4. Update `composer`:
  ~~~
  ```composer update```
  ~~~~~
  ~~~
  Note: composer is a dependency manager for PHP, for more information
  about composer visit:
  ~~~
  https://getcomposer.org/
  ~~~~~
  ~~~~~
  ~~~
  Note: Running `composer update` will install rig at the following path:
  ~~~
  `~/roady/vendor/darling/rig`
  ~~~~~
  rig is a command line utility designed to aid in the development
  of roady Apps.
  ~~~~~
  ~~~
  Note: Running `composer update` will install the roadyAppPackages
  library at the following path:
  ~~~
  `~/roady/vendor/darling/roady-app-packages`
  ~~~~~
  The roadyAppPackages library is a collection of roady App Packages
  that can be made into roady Apps via:
  ~~~
  `rig --make-app-package`.
  ~~~~~
  Once roady is installed and setup, more information about
  `rig --make-app-package` can be obtained via:
  ~~~
  `rig --help --make-app-package`
  ~~~~~
  Once roady is installed and setup, more information about
  App Packages can be obtained via:
  ~~~
  `rig --help AppPackages`
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  5. Add rig to your path:
  ~~~
  ```export PATH="${PATH}:${HOME}/roady/vendor/darling/rig/bin"```
  ~~~~~
  ~~~
  Note: This will only add rig to your `$PATH` temporarily, to add it
  permanently you will need to set your `$PATH` in the appropriate
  configuration file for the shell you are using. For information
  on setting your `$PATH` permanently, please consult the documentation
  for the shell you are using.
  ~~~~~
  ~~~~~
  ~~~
  6. Make sure rig is working:
  ~~~
  ```rig --help | less -R```
  ~~~~~
  ~~~
  Note: The documentation can always be obtained locally via
  the command line by using:
  ~~~
  `rig --help`
  ~~~~~
  ~~~
  Note: Additional documentation can be obtained by passing a topic
  to `rig --help`. The following is a list of the possible help topics
  available via `rig --help`:
  ~~~
  ```
  rig --help AppPackages
  rig --help Apps
  rig --help DynamicOutputComponents
  rig --help GlobalResponses
  rig --help OutputComponents
  rig --help Requests
  rig --help Responses
  rig --help getting-started
  rig --help roady
  rig --help --assign-to-response
  rig --help --configure-app-output
  rig --help --debug
  rig --help --make-app-package
  rig --help --new-app
  rig --help --new-app-package
  rig --help --new-dynamic-output-component
  rig --help --new-global-response
  rig --help --new-output-component
  rig --help --new-request
  rig --help --new-response
  rig --help --start-server
  rig --help --view-active-servers
  rig --help path-to-apps-directory
  ```
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  Note: `less` is not associated with roady or rig. The `less` command is used
  in the example to make it easier to view the output of `rig --help`. More
  information about the `less` command can be found online at:
  ~~~
  https://man7.org/linux/man-pages/man1/less.1.html
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  # Installation & Setup Is Finished
  ~~~~~
  ~~~
  roady should now be installed at the path `~/roady`, and rig
  should now be in your `$PATH`.
  ~~~~~
  ~~~
  The next step is to start developing roady Apps.
  ~~~~~
  ~~~
  # A brief introduction to roady Apps
  ~~~~~
  ~~~
  roady Apps are responsible for implementing the features of a
  website. An App may provide css stylesheets, utilize javascript,
  or configure output to be served in response to appropriate
  requests to any domains the App is built for.
  ~~~~~
  ~~~
  roady App's are just directories that contain the source code
  and resources required to implement the App's features.
  ~~~~~
  ~~~
  A roady App has the following structure:
  ~~~~~
  ~~~
  ~~~
  `Components.php` : This file is used to build an App for a domain.
  ~~~
  Note: To build an App simply execute the relevant App's Components.php
  via `php`, for example:
  ~~~
  ```php ~/roady/Apps/HelloWorld/Components.php \
  'http://localhost:8080'```
  ~~~~~
  ~~~
  Note: The App must exist in roady's Apps directory to be built.
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  `css` : This directory is for an App's css stylesheets.
  ~~~~~
  ~~~
  `DynamicOutput` : This directory is for files that generate an App's
  output.
  ~~~~~
  ~~~
  `js` : This directory is for an App's javascript files.
  ~~~~~
  ~~~
  `OutputComponents` : This directory is for files that configure an
  App's output.
  ~~~~~
  ~~~
  `Requests` : This directory is for files that configure an
  App's Requests.
  ~~~~~
  ~~~
  `resources` : This directory is for additional miscellaneous files
  and directories utilized by the App.
  ~~~~~
  ~~~
  `Responses` : This directory is for files that configure an
  App's Responses.
  ~~~~~
  ~~~~~
  ~~~
  Apps can be created via `rig --new-app`, or `rig --configure-app-output`.
  ~~~~~
  ~~~
  Once created, an App can be built for a domain by executing the App's
  Components.php with `php`. For example:
  ~~~
  `php ~/roady/Apps/HelloWorld/Components.php 'http://localhost:8080'`
  ~~~~~
  ~~~~~
  ~~~
  Note: More information about Apps can be obtained via:
  ~~~
  `rig --help Apps`
  ~~~~~
  More information about `rig --new-app` can be obtained via:
  ~~~
  `rig --help --new-app`
  ~~~~~
  More information about `rig --configure-app-output` can be obtained via:
  ~~~
  `rig --help --configure-app-output`
  ~~~~~
  ~~~~~
  ~~~
  # Hello World
  ~~~~~
  ~~~
  The following example demonstrates how to use rig to begin
  developing an App named HelloWorld.
  ~~~~~
  ~~~
  Note: In the following examples roady is assumed to be installed
  in the user's `home` directory. Make sure to adjust the paths
  used in the following examples if you installed roady at a
  different path.
  ~~~~~
  ~~~
  1. Use `rig --configure-app-output` to create an App named
  HelloWorld, and configure the output `<p>Hello World</p>`
  to be served in response to requests to the root of any
  domain the HelloWorld App is built for:
  ~~~
  ```
  rig --configure-app-output \
  --for-app HelloWorld \
  --name HelloWorld \
  --output '<p>Hello World</p>' \
  --relative-urls '/'
  ```
  ~~~~~
  ~~~~~
  ~~~
  2. Build the HelloWorld App for the local domain `http://localhost:8080`:
  ~~~
  ```
  php ~/roady/Apps/HelloWorld/Components.php \
  'http://localhost:8080'
  ```
  ~~~~~
  ~~~~~
  ~~~
  3. Use `rig --start-server` to start a local development server on port `8080`:
  ~~~
  ```
  rig --start-server \
  --port 8080 \
  --open-in-browser
  ```
  ~~~~~
  ~~~
  Note: The `--open-in-browser` flag should cause rig to open
  http://localhost:8080 in a web browser. This flag relies on the
  `xdg-open` command, and may not always work. If it fails, you can
  still manually open http://localhost:8080 in a web browser.
  ~~~~~
  ~~~
  Note: `xdg-open` is a command that will open a url in the user's default
  browser, if it is not available on your system then the
  `--open-in-broswer` flag will not work. The `xdg-open` command is not
  associated with roady or rig, more information about the `xdg-open`
  command can be found at:

  https://linux.die.net/man/1/xdg-open
  ~~~~~
  ~~~~~
  ~~~
  4. Use a text editor or IDE to edit HelloWorld's output:
  ~~~```vim ~/roady/Apps/HelloWorld/DynamicOutput/HelloWorld.php```~~~~~
  ~~~
  And revise `~/roady/Apps/HelloWorld/DynamicOutput/HelloWorld.php`'s
  content to be:
  ~~~~~
  ~~~
  ```
  <div class="hw-container">
      <h1>Roady</h1>
      <p>
          roady is a tool designed to aid in the development of websites.
      </p>
      <p>
          With roady, the features of a website are implemented by small niche
          applications called Apps.
      </p>
      <p>
          roady Apps may provide css stylesheets, utilize javascript, and may
          configure output to be served in response to appropriate requests to
          a website's domain.
      </p>
      <p>
          Multiple websites can run on a single installation of roady, each
          making use of one or more roady Apps.
          roady is a unique tool, an ongoing experiment, developed out of a
          passion for coding.
      </p>
  </div>
  ```
  ~~~~~
  ~~~~~
  ~~~
  5. Create a stylesheet named `hw-global-styles.css` for the
  HelloWorld App using a text editor or IDE:
  ~~~```vim ~/roady/Apps/HelloWorld/css/hw-global-styles.css```~~~~~
  ~~~
  Define the following styles in
  `~/roady/Apps/HelloWorld/css/hw-global-styles.css`:
  ~~~~~
  ~~~
  ```
  body {
      background: #140a09;
      background-image: linear-gradient(45deg, #00bbff 25%, transparent 25%),
                        linear-gradient(-45deg, #020203 25%, transparent 25%),
                        linear-gradient(45deg, transparent 75%, #00bbff 75%),
                        linear-gradient(-45deg, transparent 75%, #020203 75%);
      background-size: 10rem 10rem;
      background-position: 0 0, 0 10rem, 10rem -10rem, -10rem 0rem;
      color: #00ffc3;
      font-size: 1.2rem;
      font-family: monospace;
      padding: 0;
      margin: 0;
  }

  .hw-container {
      width: 80%;
      background: #010103;
      opacity: .92;
      margin: 3rem auto;
      padding: 3rem;
      border: .2rem double white;
  }

  .hw-container h1 {
      color: white;
      text-shadow: -1px 1px #00ffc3;
  }

  .hw-container a, .hw-container a:link, .hw-container a:visited {
      text-decoration: none;
      color: white;
  }

  .hw-container a:hover, .hw-container a:active {
      color: #00bbff;
  }
  ```
  ~~~~~
  ~~~
  Note:
  ~~~
  Apps can define stylesheets that are served in response to
  specific Requests to the domains an App is built for, or can define
  stylesheets that are served in response to all Requests to the
  domains an App is built for.
  ~~~~~
  ~~~
  If the name of a stylesheet defined by an App contains the word
  `global`, it will be served in response to all Requests to the
  domains that the App is built for.
  ~~~~~
  ~~~
  For instance, in the Hello World example a stylesheet named
  `hw-global-styles.css` is defined by the HelloWorld App, and
  the HelloWorld App is built for the domain http://localhost:8080,
  so the `hw-global-styles.css` stylesheet will be served in response
  to all Requests to the domain http://localhost:8080.
  ~~~~~
  ~~~
  If the stylesheet's name does not contain the word `global`, then the
  stylesheet will only be served in response to Requests whose name
  matches the name of the stylesheet, excluding the `.css` extension.
  ~~~~~
  ~~~
  Note: The name of the Request will correspond to the value of
  `$_GET['request']`.
  ~~~~~
  ~~~
  For instance, if the HelloWorld App also defined a stylesheet
  named `homepage.css`, then the `homepage.css` stylesheet would
  only be served in response to Requests that have the name
  `homepage`. For example:
  ~~~~~
  ~~~
  http://localhost:8080?request=homepage
  ~~~~~
  ~~~
  http://localhost:8080/index.php?request=homepage
  ~~~~~
  ~~~
  http://localhost:8080/index.php?foo=bar&request=homepage
  ~~~~~
  More information about using css stylesheets in roady Apps
  can be obtained via:
  ~~~
  `rig --help css`
  ~~~~~
  More information about roady Apps can be obtained via:
  ~~~
  `rig --help Apps`
  ~~~~~
  ~~~~~
  ~~~~~
  ~~~
  # A Brief Introduction To App Packages
  ~~~~~
  ~~~
  Apps may be developed, backed up, or shared as App Packages.
  ~~~~~
  ~~~
  roady App Packages have the same structure as a roady App, except
  an App Package defines all of an App's configurations in a
  single file named `make.sh`, instead of in individual `.php`
  files.
  ~~~~~
  ~~~
  For example:
  ~~~~~
  ~~~
  ### App Structure
  ```
  Components.php
  css
  DynamicOutput
  js
  OutputComponents
  Requests
  resources
  Responses
  ```
  ### App Package Structure
  ```
  DynamicOutput
  css
  js
  make.sh
  resources
  ```
  ~~~~~
  ~~~
  Note: `make.sh` is a bash script that defines the appropriate
  calls to rig to make the roady App Package into a roady
  App.
  ~~~~~
  ~~~
  Note: More information about App Packages can be obtained via:
  ~~~
  `rig --help AppPackages`
  ~~~~~
  ~~~~~
  ~~~
  # The App Packager
  ~~~~~
  ~~~
  Note: In the following examples roady is assumed to be installed
  in the user's `home` directory. Make sure to adjust the paths
  used in the following examples if you installed roady at a
  different path.
  ~~~~~
  ~~~
  # Packaging Hello World
  ~~~~~
  ~~~
  # Modifying Hello World's App Package
  ~~~~~
  ~~~
  # Re-making Hello World
  ~~~~~
  ~~~
  # Final Thoughts...
  ~~~~~
