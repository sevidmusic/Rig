#!/usr/bin/env sh

#
# This script just executes rig.php, making it possible
# use rig by simply calling:
#
# rig
#
# instead of:
#
# php rig.php
#

clear

logErrorMsg() {
	printf "\n\e[43m\e[30m%s\n\e[0m" "${1}" >>/dev/stderr
}

logErrorMsgAndExit1() {
	logErrorMsg "${1}"
	exit 1
}

# rreadlink --path
#
# Posix compliant solution to find the current scripts true path.
#
# This solution was found in the following post on stackoverflow
# courtesy of user mklement0:
#
# https://stackoverflow.com/questions/29832037/how-to-get-script-directory-in-posix-sh
#
# This function makes it possible to use sh instead of bash, avoiding
# the necessity to make use of the $BASH_SOURCE variable to determine
# this scripts path.
#
# Also very helpful was the following gist:
#
# https://gist.github.com/mathieucaroff/4e8178861a3b42cd3fc9c856404ceba1
#
# The code that is part of the rreadlink() method is not my own,
# and should be credited to the user mklement0 on stackoverflow.
#
# https://stackoverflow.com/users/45375/mklement0
#
# Note: Make sure to execute the function in a *subshell* to localize
#       variables and the effect of `cd`.
#
#       For example:
#
#       rigBinPath=$(dirname -- "$(rreadlink "$0")")
#
rreadlink() (

	target=$1 fname='' targetDir='' CDPATH=''

	# Try to make the execution environment as predictable
	# as possible.
	#
	# All commands below are invoked via `command`, so we must
	# make sure that `command` itself is not redefined as an alias
	# or shell function.
	#
	# `command` is a *builtin* in bash, dash, ksh, zsh, and some
	# platforms do not even have an external utility version of
	# it (e.g, Ubuntu).
	#
	# `command` bypasses aliases and shell functions and also
	# finds builtins in bash, dash, and ksh. In zsh, option
	# POSIX_BUILTINS must be turned on for that to happen.
	{
		\unalias command
		\unset -f command
	} >/dev/null 2>&1
	# make zsh find *builtins* with `command` too.
	[ -n "$ZSH_VERSION" ] && export options[POSIX_BUILTINS]=on
	# Resolve potential symlinks until the ultimate target is found.
	while :; do
		[ -L "$target" ] || [ -e "$target" ] || {
			command printf '%s\n' "ERROR: '$target' does not exist." >&2
			return 1
		}
		# Change to target dir; necessary for correct resolution of target path.
		command cd "$(command dirname -- "$target")" || {
			command printf '%s\n' "ERROR: '$target' exists, but is not accessible." >&2
			return 1
		}
		# Extract filename.
		fname=$(command basename -- "$target")
		# !! curiously, `basename /` returns '/'
		[ "$fname" = '/' ] && fname=''
		if [ -L "$fname" ]; then
			# Extract [next] target path, which may be
			# defined *relative* to the symlink's own
			# directory.
			#
			# Note: We parse `ls -l` output to find
			# the symlink target which is the only
			# POSIX-compliant, albeit somewhat fragile,
			# way.
			target=$(command ls -l "$fname")
			target=${target#* -> }
			# Resolve [next] symlink target.
			continue
		fi
		# Ultimate target reached.
		break
	done
	# Get canonical dir. path
	targetDir=$(command pwd -P)
	# Output the ultimate target's canonical path.
	# Note that we manually resolve paths ending in /. and /..
	# to make sure we have a normalized path.
	if [ "$fname" = '.' ]; then
		command printf '%s\n' "${targetDir%/}"
	elif [ "$fname" = '..' ]; then
		# Caveat: something like /var/.. will resolve to
		# /private (assuming /var@ -> /private/var),
		# i.e. the '..' is applied AFTER canonicalization.
		command printf '%s\n' "$(command dirname -- "${targetDir}")"
	else
		command printf '%s\n' "${targetDir%/}/$fname"
	fi
)

if [ -z "$COMPOSER_RUNTIME_BIN_DIR" ]; then
	rigBinPath=$(dirname -- "$(rreadlink "$0")")
else
	rigBinPath="$COMPOSER_RUNTIME_BIN_DIR"
fi

[ -z "$(command -v php)" ] &&
	logErrorMsgAndExit1 "php is not available!"

"$(command -v php)" "${rigBinPath}/rig.php" "$@"
