#!/bin/sh
#
# rig
#
# This script just serves rig.php, the rig command line utilities actual logic
# is implemented in rig.php
#

clear

logErrorMsg() {
	printf "\n\e[43m\e[30m%s\n\e[0m" "${1}" >>/dev/stderr
}

logErrorMsgAndExit1() {
	logErrorMsg "${1}"
	exit 1
}

# Posix compliant solution to finding current scripts true path was
# found in the following post on stackoverflow courtesy of user
# mklement0:
#
# https://stackoverflow.com/questions/29832037/how-to-get-script-directory-in-posix-sh
#
# This function is a life saver, without it this script would have had
# to use #/bin/bash so the $BASH_SOURCE variable could be used, which
# was not ideal.
#
# Also very helpful was the following gist:
#
# https://gist.github.com/mathieucaroff/4e8178861a3b42cd3fc9c856404ceba1
#
# The code that is part of the rreadlink() method is not my own,
# and should be credited to the user mklement0 on stackoverflow.
#
# https://stackoverflow.com/users/45375/mklement0
#
rreadlink() ( # Execute the function in a *subshell* to localize variables and the effect of `cd`.

	target=$1 fname='' targetDir='' CDPATH=''

	# Try to make the execution environment as predictable as possible:
	# All commands below are invoked via `command`, so we must make sure that `command`
	# itself is not redefined as an alias or shell function.
	# (Note that command is too inconsistent across shells, so we don't use it.)
	# `command` is a *builtin* in bash, dash, ksh, zsh, and some platforms do not even have
	# an external utility version of it (e.g, Ubuntu).
	# `command` bypasses aliases and shell functions and also finds builtins
	# in bash, dash, and ksh. In zsh, option POSIX_BUILTINS must be turned on for that
	# to happen.
	{
		\unalias command
		\unset -f command
	} >/dev/null 2>&1
	[ -n "$ZSH_VERSION" ] && options[POSIX_BUILTINS]=on # make zsh find *builtins* with `command` too.

	while :; do # Resolve potential symlinks until the ultimate target is found.
		[ -L "$target" ] || [ -e "$target" ] || {
			command printf '%s\n' "ERROR: '$target' does not exist." >&2
			return 1
		}
		command cd "$(command dirname -- "$target")" # Change to target dir; necessary for correct resolution of target path.
		fname=$(command basename -- "$target")       # Extract filename.
		[ "$fname" = '/' ] && fname=''               # !! curiously, `basename /` returns '/'
		if [ -L "$fname" ]; then
			# Extract [next] target path, which may be defined
			# *relative* to the symlink's own directory.
			# Note: We parse `ls -l` output to find the symlink target
			#       which is the only POSIX-compliant, albeit somewhat fragile, way.
			target=$(command ls -l "$fname")
			target=${target#* -> }
			continue # Resolve [next] symlink target.
		fi
		break # Ultimate target reached.
	done
	targetDir=$(command pwd -P) # Get canonical dir. path
	# Output the ultimate target's canonical path.
	# Note that we manually resolve paths ending in /. and /.. to make sure we have a normalized path.
	if [ "$fname" = '.' ]; then
		command printf '%s\n' "${targetDir%/}"
	elif [ "$fname" = '..' ]; then
		# Caveat: something like /var/.. will resolve to /private (assuming /var@ -> /private/var), i.e. the '..' is applied
		# AFTER canonicalization.
		command printf '%s\n' "$(command dirname -- "${targetDir}")"
	else
		command printf '%s\n' "${targetDir%/}/$fname"
	fi
)

rigBinPath=$(dirname -- "$(rreadlink "$0")")

[ -z "$(command -v php)" ] && logErrorMsgAndExit1 "php is not available!"

"$(command -v php)" "${rigBinPath}/../rig.php" "$@"
